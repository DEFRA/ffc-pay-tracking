const { getWarningStatus } = require('../../../../app/data-generation/get-warning-status')
const {
  BATCH_REJECTED,
  BATCH_QUARANTINED,
  PAYMENT_REJECTED,
  PAYMENT_DAX_REJECTED,
  PAYMENT_INVALID_BANK,
  PAYMENT_PROCESSING_FAILED,
  PAYMENT_SETTLEMENT_UNMATCHED,
  RESPONSE_REJECTED,
  PAYMENT_REQUEST_BLOCKED,
  PAYMENT_DAX_UNAVAILABLE,
  RECEIVER_CONNECTION_FAILED
} = require('../../../../app/constants/warnings')
const {
  BATCH_REJECTED_STATUS,
  BATCH_QUARANTINED_STATUS,
  PAYMENT_REJECTED_STATUS,
  PAYMENT_DAX_REJECTED_STATUS,
  PAYMENT_INVALID_BANK_STATUS,
  PAYMENT_PROCESSING_FAILED_STATUS,
  PAYMENT_SETTLEMENT_UNMATCHED_STATUS,
  RESPONSE_REJECTED_STATUS,
  PAYMENT_REQUEST_BLOCKED_STATUS,
  PAYMENT_DAX_UNAVAILABLE_STATUS,
  RECEIVER_CONNECTION_FAILED_STATUS
} = require('../../../../app/constants/statuses')

test('getWarningStatus', () => {
  expect(getWarningStatus({ type: BATCH_REJECTED })).toBe(BATCH_REJECTED_STATUS)
  expect(getWarningStatus({ type: BATCH_QUARANTINED })).toBe(BATCH_QUARANTINED_STATUS)
  expect(getWarningStatus({ type: PAYMENT_REJECTED })).toBe(PAYMENT_REJECTED_STATUS)
  expect(getWarningStatus({ type: PAYMENT_DAX_REJECTED })).toBe(PAYMENT_DAX_REJECTED_STATUS)
  expect(getWarningStatus({ type: PAYMENT_INVALID_BANK })).toBe(PAYMENT_INVALID_BANK_STATUS)
  expect(getWarningStatus({ type: PAYMENT_PROCESSING_FAILED })).toBe(PAYMENT_PROCESSING_FAILED_STATUS)
  expect(getWarningStatus({ type: PAYMENT_SETTLEMENT_UNMATCHED })).toBe(PAYMENT_SETTLEMENT_UNMATCHED_STATUS)
  expect(getWarningStatus({ type: RESPONSE_REJECTED })).toBe(RESPONSE_REJECTED_STATUS)
  expect(getWarningStatus({ type: PAYMENT_REQUEST_BLOCKED })).toBe(PAYMENT_REQUEST_BLOCKED_STATUS)
  expect(getWarningStatus({ type: PAYMENT_DAX_UNAVAILABLE })).toBe(PAYMENT_DAX_UNAVAILABLE_STATUS)
  expect(getWarningStatus({ type: RECEIVER_CONNECTION_FAILED })).toBe(RECEIVER_CONNECTION_FAILED_STATUS)
  expect(getWarningStatus({ type: 'OTHER_EVENT' })).toBeUndefined()
})
